/* tslint:disable */
/* eslint-disable */
/**
 * subtube
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * The youtube channel ID (must be 24 ASCII characters)
     * @type {string}
     * @memberof Channel
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'name': string;
    /**
     * Channel description in HTML form
     * @type {string}
     * @memberof Channel
     */
    'descriptionHtml': string;
    /**
     * Number of subscribtions
     * @type {number}
     * @memberof Channel
     */
    'subCount': number;
    /**
     * 
     * @type {Array<Thumbnail>}
     * @memberof Channel
     */
    'thumbnails'?: Array<Thumbnail>;
}
/**
 * 
 * @export
 * @interface ChannelInfo
 */
export interface ChannelInfo {
    /**
     * 
     * @type {Channel}
     * @memberof ChannelInfo
     */
    'channel': Channel;
    /**
     * 
     * @type {ChannelMeta}
     * @memberof ChannelInfo
     */
    'meta': ChannelMeta;
}
/**
 * 
 * @export
 * @interface ChannelMeta
 */
export interface ChannelMeta {
    /**
     * The last cached UNIX Timestamp
     * @type {number}
     * @memberof ChannelMeta
     */
    'cachedAt': number;
    /**
     * 
     * @type {string}
     * @memberof ChannelMeta
     */
    'intro'?: string;
}
/**
 * 
 * @export
 * @interface MediaInfoM
 */
export interface MediaInfoM {
    /**
     * 
     * @type {YoutubeMedia}
     * @memberof MediaInfoM
     */
    'media': YoutubeMedia;
    /**
     * 
     * @type {MediaMeta}
     * @memberof MediaInfoM
     */
    'meta': MediaMeta;
}
/**
 * 
 * @export
 * @interface MediaInfoWithTagM
 */
export interface MediaInfoWithTagM {
    /**
     * 
     * @type {MediaInfoM}
     * @memberof MediaInfoWithTagM
     */
    'info': MediaInfoM;
    /**
     * 
     * @type {TagMeta}
     * @memberof MediaInfoWithTagM
     */
    'tagMeta': TagMeta;
}
/**
 * The meta information of the media, normally such information doesn\'t come from the media source, but from the backend server
 * @export
 * @interface MediaMeta
 */
export interface MediaMeta {
    /**
     * 
     * @type {string}
     * @memberof MediaMeta
     */
    'mediaID': string;
    /**
     * The source of the media
     * @type {MediaSource}
     * @memberof MediaMeta
     */
    'source': MediaSource;
    /**
     * The UNIX timestamp that the media info was cached
     * @type {number}
     * @memberof MediaMeta
     */
    'cachedAt': number;
    /**
     * Personal introduction of the media
     * @type {string}
     * @memberof MediaMeta
     */
    'introduction'?: string;
}


/**
 * The sort order of medias
 * @export
 * @enum {string}
 */

export const MediaSortOrder = {
    Newest: 'Newest',
    Popular: 'Popular'
} as const;

export type MediaSortOrder = typeof MediaSortOrder[keyof typeof MediaSortOrder];


/**
 * 
 * @export
 * @enum {string}
 */

export const MediaSource = {
    Local: 'Local',
    Youtube: 'Youtube'
} as const;

export type MediaSource = typeof MediaSource[keyof typeof MediaSource];


/**
 * 
 * @export
 * @interface TagMeta
 */
export interface TagMeta {
    /**
     * 
     * @type {Array<TaggingMethod>}
     * @memberof TagMeta
     */
    'taggingMethods'?: Array<TaggingMethod>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TaggingMethod = {
    YoutubeChannel: 'YoutubeChannel',
    YoutubeVideo: 'YoutubeVideo'
} as const;

export type TaggingMethod = typeof TaggingMethod[keyof typeof TaggingMethod];


/**
 * 
 * @export
 * @interface Thumbnail
 */
export interface Thumbnail {
    /**
     * 
     * @type {number}
     * @memberof Thumbnail
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof Thumbnail
     */
    'width': number;
    /**
     * 
     * @type {string}
     * @memberof Thumbnail
     */
    'url': string;
}
/**
 * The information of the media
 * @export
 * @interface YoutubeMedia
 */
export interface YoutubeMedia {
    /**
     * The length of the media in seconds
     * @type {number}
     * @memberof YoutubeMedia
     */
    'length': number;
    /**
     * 
     * @type {string}
     * @memberof YoutubeMedia
     */
    'title': string;
    /**
     * 
     * @type {Array<Thumbnail>}
     * @memberof YoutubeMedia
     */
    'thumbnails'?: Array<Thumbnail>;
    /**
     * The youtube channel ID (must be 24 ASCII characters)
     * @type {string}
     * @memberof YoutubeMedia
     */
    'channelID': string;
    /**
     * The youtube video ID (must be 11 ASCII characters)
     * @type {string}
     * @memberof YoutubeMedia
     */
    'videoID': string;
    /**
     * UNIX Timestamp
     * @type {number}
     * @memberof YoutubeMedia
     */
    'published': number;
    /**
     * Media description in HTML form
     * @type {string}
     * @memberof YoutubeMedia
     */
    'descriptionHtml': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeChannelChannelId: async (channelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getV10YoutubeChannelChannelId', 'channelId', channelId)
            const localVarPath = `/v1.0/youtube/channel/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return videos of the given channel
         * @param {string} channelId 
         * @param {MediaSortOrder} [sortOrder] 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeChannelChannelIdVideos: async (channelId: string, sortOrder?: MediaSortOrder, cacheRefreshThreshold?: number, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getV10YoutubeChannelChannelIdVideos', 'channelId', channelId)
            const localVarPath = `/v1.0/youtube/channel/{channel_id}/videos`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (cacheRefreshThreshold !== undefined) {
                localVarQueryParameter['cache_refresh_threshold'] = cacheRefreshThreshold;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of ChannelInfo with respect to the given query
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeChannelSearch: async (query: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getV10YoutubeChannelSearch', 'query', query)
            const localVarPath = `/v1.0/youtube/channel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return channels of the given tag
         * @param {string} tag 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeTagTagChannels: async (tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('getV10YoutubeTagTagChannels', 'tag', tag)
            const localVarPath = `/v1.0/youtube/tag/{tag}/channels`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cacheRefreshThreshold !== undefined) {
                localVarQueryParameter['cache_refresh_threshold'] = cacheRefreshThreshold;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return videos of the given tag
         * @param {string} tag 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<MediaSource>} [allowedMediaSources] 
         * @param {Array<TaggingMethod>} [allowedTaggingMethods] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeTagTagVideos: async (tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, allowedMediaSources?: Array<MediaSource>, allowedTaggingMethods?: Array<TaggingMethod>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('getV10YoutubeTagTagVideos', 'tag', tag)
            const localVarPath = `/v1.0/youtube/tag/{tag}/videos`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cacheRefreshThreshold !== undefined) {
                localVarQueryParameter['cache_refresh_threshold'] = cacheRefreshThreshold;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (allowedMediaSources) {
                localVarQueryParameter['allowed_media_sources'] = allowedMediaSources;
            }

            if (allowedTaggingMethods) {
                localVarQueryParameter['allowed_tagging_methods'] = allowedTaggingMethods;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV10YoutubeChannelChannelId(channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV10YoutubeChannelChannelId(channelId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getV10YoutubeChannelChannelId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return videos of the given channel
         * @param {string} channelId 
         * @param {MediaSortOrder} [sortOrder] 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV10YoutubeChannelChannelIdVideos(channelId: string, sortOrder?: MediaSortOrder, cacheRefreshThreshold?: number, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaInfoM>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV10YoutubeChannelChannelIdVideos(channelId, sortOrder, cacheRefreshThreshold, offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getV10YoutubeChannelChannelIdVideos']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return a list of ChannelInfo with respect to the given query
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV10YoutubeChannelSearch(query: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV10YoutubeChannelSearch(query, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getV10YoutubeChannelSearch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return channels of the given tag
         * @param {string} tag 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV10YoutubeTagTagChannels(tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV10YoutubeTagTagChannels(tag, cacheRefreshThreshold, offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getV10YoutubeTagTagChannels']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return videos of the given tag
         * @param {string} tag 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<MediaSource>} [allowedMediaSources] 
         * @param {Array<TaggingMethod>} [allowedTaggingMethods] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV10YoutubeTagTagVideos(tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, allowedMediaSources?: Array<MediaSource>, allowedTaggingMethods?: Array<TaggingMethod>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaInfoWithTagM>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV10YoutubeTagTagVideos(tag, cacheRefreshThreshold, offset, limit, allowedMediaSources, allowedTaggingMethods, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getV10YoutubeTagTagVideos']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeChannelChannelId(channelId: string, options?: any): AxiosPromise<ChannelInfo> {
            return localVarFp.getV10YoutubeChannelChannelId(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return videos of the given channel
         * @param {string} channelId 
         * @param {MediaSortOrder} [sortOrder] 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeChannelChannelIdVideos(channelId: string, sortOrder?: MediaSortOrder, cacheRefreshThreshold?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Array<MediaInfoM>> {
            return localVarFp.getV10YoutubeChannelChannelIdVideos(channelId, sortOrder, cacheRefreshThreshold, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of ChannelInfo with respect to the given query
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeChannelSearch(query: string, options?: any): AxiosPromise<Array<ChannelInfo>> {
            return localVarFp.getV10YoutubeChannelSearch(query, options).then((request) => request(axios, basePath));
        },
        /**
         * Return channels of the given tag
         * @param {string} tag 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeTagTagChannels(tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Array<ChannelInfo>> {
            return localVarFp.getV10YoutubeTagTagChannels(tag, cacheRefreshThreshold, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Return videos of the given tag
         * @param {string} tag 
         * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<MediaSource>} [allowedMediaSources] 
         * @param {Array<TaggingMethod>} [allowedTaggingMethods] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV10YoutubeTagTagVideos(tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, allowedMediaSources?: Array<MediaSource>, allowedTaggingMethods?: Array<TaggingMethod>, options?: any): AxiosPromise<Array<MediaInfoWithTagM>> {
            return localVarFp.getV10YoutubeTagTagVideos(tag, cacheRefreshThreshold, offset, limit, allowedMediaSources, allowedTaggingMethods, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV10YoutubeChannelChannelId(channelId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV10YoutubeChannelChannelId(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return videos of the given channel
     * @param {string} channelId 
     * @param {MediaSortOrder} [sortOrder] 
     * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV10YoutubeChannelChannelIdVideos(channelId: string, sortOrder?: MediaSortOrder, cacheRefreshThreshold?: number, offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV10YoutubeChannelChannelIdVideos(channelId, sortOrder, cacheRefreshThreshold, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of ChannelInfo with respect to the given query
     * @param {string} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV10YoutubeChannelSearch(query: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV10YoutubeChannelSearch(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return channels of the given tag
     * @param {string} tag 
     * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV10YoutubeTagTagChannels(tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV10YoutubeTagTagChannels(tag, cacheRefreshThreshold, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return videos of the given tag
     * @param {string} tag 
     * @param {number} [cacheRefreshThreshold] A UNIX timestamp that sets the oldest allowed cache. If the cached information is (strictly) older than this threshold, it will be updated and then returned; otherwise, it can be directly returned.
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {Array<MediaSource>} [allowedMediaSources] 
     * @param {Array<TaggingMethod>} [allowedTaggingMethods] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV10YoutubeTagTagVideos(tag: string, cacheRefreshThreshold?: number, offset?: number, limit?: number, allowedMediaSources?: Array<MediaSource>, allowedTaggingMethods?: Array<TaggingMethod>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV10YoutubeTagTagVideos(tag, cacheRefreshThreshold, offset, limit, allowedMediaSources, allowedTaggingMethods, options).then((request) => request(this.axios, this.basePath));
    }
}



